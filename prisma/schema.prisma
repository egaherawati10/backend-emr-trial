generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  doctor
  pharmacist
  cashier
  patient
}

enum UserStatus {
  active
  suspended
}

enum PaymentStatus {
  pending
  paid
  cancelled
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  username  String    @unique
  email     String    @unique
  password  String
  role      UserRole
  status    UserStatus @default(active)

  patientProfile PatientProfile?
  medicalRecords MedicalRecord[]   @relation("DoctorMedicalRecords")
  prescriptions  Prescription[]    @relation("PharmacistPrescriptions")
  payments       Payment[]         @relation("CashierPayments")
  soapNotes      Record[]          @relation("DoctorSOAP")
}

model PatientProfile {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  dob      DateTime
  gender   String
  address  String
  phone    String

  user            User            @relation(fields: [userId], references: [id])
  medicalRecords  MedicalRecord[]
  payments        Payment[]
  soapNotes       Record[]        @relation("PatientSOAP")
}

model MedicalRecord {
  id         Int       @id @default(autoincrement())
  patientId  Int
  doctorId   Int
  visitDate  DateTime
  diagnosis  String
  notes      String?

  patient    PatientProfile @relation(fields: [patientId], references: [id])
  doctor     User           @relation("DoctorMedicalRecords", fields: [doctorId], references: [id])
  prescriptions Prescription[]
}

model Record {
  id          Int       @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  subjective  String
  objective   String
  assessment  String
  planning    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  patient     PatientProfile @relation("PatientSOAP", fields: [patientId], references: [id])
  doctor      User           @relation("DoctorSOAP", fields: [doctorId], references: [id])
}

model Prescription {
  id              Int       @id @default(autoincrement())
  medicalRecordId Int
  pharmacistId    Int?
  dateIssued      DateTime
  notes           String?

  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  pharmacist      User?         @relation("PharmacistPrescriptions", fields: [pharmacistId], references: [id])
  items           PrescriptionItem[]
}

model PrescriptionItem {
  id             Int       @id @default(autoincrement())
  prescriptionId Int
  medicineId     Int
  dosage         String
  quantity       Int
  instructions   String?

  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicine       Medicine     @relation(fields: [medicineId], references: [id])
}

model Medicine {
  id       Int       @id @default(autoincrement())
  name     String
  type     String
  stock    Int
  price    Decimal   @db.Decimal(10,2)

  items    PrescriptionItem[]
}

model Payment {
  id         Int       @id @default(autoincrement())
  patientId  Int
  cashierId  Int
  totalAmount Decimal   @db.Decimal(10,2)
  paymentDate DateTime
  method      String
  status      PaymentStatus @default(pending)

  patient     PatientProfile @relation(fields: [patientId], references: [id])
  cashier     User           @relation("CashierPayments", fields: [cashierId], references: [id])
  items       PaymentItem[]
}

model PaymentItem {
  id         Int     @id @default(autoincrement())
  paymentId  Int
  description String
  amount     Decimal @db.Decimal(10,2)

  payment    Payment @relation(fields: [paymentId], references: [id])
}